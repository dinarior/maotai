icol  = as.factor(iris[,5])   # class information
## run Classical MDS
iris.cmds = cmds(idata, ndim=2)
## visualize
opar <- par(no.readonly=TRUE)
plot(iris.cmds$embed, col=icol)
par(opar)
opar <- par(no.readonly=TRUE)
plot(iris.cmds$embed, col=icol,
main=paste0("STRESS=",round(iris.cmds$stress,4)))
par(opar)
help("cmdscale")
plot(my2d, col=k2, main="k=2")
## use simple example of iris dataset
data(iris)
mydata = as.matrix(iris[,1:4])
## find the low-dimensional embedding for visualization
my2d = cmds(mydata, ndim=2)
## apply 'kmeanspp' with different numbers of k's.
k2 = kmeanspp(mydata, k=2)
k3 = kmeanspp(mydata, k=3)
k4 = kmeanspp(mydata, k=4)
k5 = kmeanspp(mydata, k=5)
## visualize
opar <- par(no.readonly=TRUE)
par(mfrow=c(2,2))
plot(my2d, col=k2, main="k=2")
plot(my2d, col=k3, main="k=3")
plot(my2d, col=k4, main="k=4")
plot(my2d, col=k5, main="k=5")
par(opar)
library(maotai)
my2d = cmds(mydata, ndim=2)$embed
## apply 'kmeanspp' with different numbers of k's.
k2 = kmeanspp(mydata, k=2)
k3 = kmeanspp(mydata, k=3)
k4 = kmeanspp(mydata, k=4)
k5 = kmeanspp(mydata, k=5)
## visualize
opar <- par(no.readonly=TRUE)
par(mfrow=c(2,2))
plot(my2d, col=k2, main="k=2")
plot(my2d, col=k3, main="k=3")
plot(my2d, col=k4, main="k=4")
plot(my2d, col=k5, main="k=5")
## visualize
opar <- par(no.readonly=TRUE)
par(mfrow=c(2,2))
plot(my2d, col=k2, main="k=2", pch=19, cex=0.8)
plot(my2d, col=k3, main="k=3", pch=19, cex=0.8)
plot(my2d, col=k4, main="k=4", pch=19, cex=0.8)
plot(my2d, col=k5, main="k=5", pch=19, cex=0.8)
par(opar)
## use simple example of iris dataset
data(iris)
mydata = as.matrix(iris[,1:4])
mycol  = as.factor(iris[,5])
## find the low-dimensional embedding for visualization
my2d = cmds(mydata, ndim=2)$embed
## apply 'kmeanspp' with different numbers of k's.
k2 = kmeanspp(mydata, k=2)
k3 = kmeanspp(mydata, k=3)
k4 = kmeanspp(mydata, k=4)
k5 = kmeanspp(mydata, k=5)
k6 = kmeanspp(mydata, k=6)
## visualize
opar <- par(no.readonly=TRUE)
par(mfrow=c(2,3))
plot(my2d, col=k2, main="k=2", pch=19, cex=0.8)
plot(my2d, col=k3, main="k=3", pch=19, cex=0.8)
plot(my2d, col=k4, main="k=4", pch=19, cex=0.8)
plot(my2d, col=k5, main="k=5", pch=19, cex=0.8)
plot(my2d, col=k6, main="k=6", pch=19, cex=0.8)
plot(my2d, col=mycol, main="true cluster", pch=19, cex=0.8)
par(opar)
## visualize
opar <- par(no.readonly=TRUE)
par(mfrow=c(2,3))
plot(my2d, col=k2, main="k=2", pch=19, cex=0.5)
plot(my2d, col=k3, main="k=3", pch=19, cex=0.5)
plot(my2d, col=k4, main="k=4", pch=19, cex=0.5)
plot(my2d, col=k5, main="k=5", pch=19, cex=0.5)
plot(my2d, col=k6, main="k=6", pch=19, cex=0.5)
plot(my2d, col=mycol, main="true cluster", pch=19, cex=0.5)
par(opar)
library(maotai)
help(Rtsne)
library(maotai)
## use simple example of iris dataset
data(iris)
mydat = as.matrix(iris[,1:4])
mylab = as.factor(iris[,5])
## run t-SNE and MDS for comparison
iris.cmds = cmds(mydat, ndim=2)
iris.tsne = tsne(mymat, ndim=2)
## extract coordinates and class information
cx = iris.cmds$embed # embedded coordinates of CMDS
tx = iris.tsne$embed #                         t-SNE
## visualize
#  main title
mc = paste("CMDS with STRESS=",round(iris.cmds$stress,4),sep="")
mt = paste("tSNE with STRESS=",round(iris.tsne$stress,4),sep="")
#  draw a figure
opar <- par(mfrow=c(1,2), pty="s")
plot(cx, col=mylab, pch=19, main=mc)
plot(tx, col=mylab, pch=19, main=mt)
par(opar)
iris.cmds = cmds(mydat, ndim=2)
iris.tsne = tsne(mydat, ndim=2)
## extract coordinates and class information
cx = iris.cmds$embed # embedded coordinates of CMDS
tx = iris.tsne$embed #                         t-SNE
## visualize
#  main title
mc = paste("CMDS with STRESS=",round(iris.cmds$stress,4),sep="")
mt = paste("tSNE with STRESS=",round(iris.tsne$stress,4),sep="")
#  draw a figure
opar <- par(mfrow=c(1,2), pty="s")
plot(cx, col=mylab, pch=19, main=mc)
plot(tx, col=mylab, pch=19, main=mt)
par(opar)
library(maotai)
mylab = as.factor(iris[,5])
## run t-SNE and MDS for comparison
iris.cmds = cmds(mydat, ndim=2)
iris.tsne = tsne(mydat, ndim=2)
## extract coordinates and class information
cx = iris.cmds$embed # embedded coordinates of CMDS
tx = iris.tsne$embed #                         t-SNE
## visualize
#  main title
mc = paste("CMDS with STRESS=",round(iris.cmds$stress,4),sep="")
mt = paste("tSNE with STRESS=",round(iris.tsne$stress,4),sep="")
#  draw a figure
opar <- par(no.readonly=TRUE)
par(mfrow=c(2,1))
plot(cx, col=mylab, pch=19, main=mc)
plot(tx, col=mylab, pch=19, main=mt)
par(opar)
reduced.regress = glm(Class ~ BNucl + Thick + Chrom, data = wbca)
## use simple example of iris dataset
data(iris)
mydat = as.matrix(iris[,1:4])
mylab = as.factor(iris[,5])
## run t-SNE and MDS for comparison
iris.cmds = cmds(mydat, ndim=2)
iris.tsne = tsne(mydat, ndim=2)
## extract coordinates and class information
cx = iris.cmds$embed # embedded coordinates of CMDS
tx = iris.tsne$embed #                         t-SNE
## visualize
#  main title
mc = paste("CMDS with STRESS=",round(iris.cmds$stress,4),sep="")
mt = paste("tSNE with STRESS=",round(iris.tsne$stress,4),sep="")
#  draw a figure
opar <- par(no.readonly=TRUE)
par(mfrow=c(2,1))
plot(cx, col=mylab, pch=19, main=mc)
plot(tx, col=mylab, pch=19, main=mt)
par(opar)
## use simple example of iris dataset
data(iris)
mydat = as.matrix(iris[,1:4])
mylab = as.factor(iris[,5])
## run t-SNE and MDS for comparison
iris.cmds = cmds(mydat, ndim=2)
iris.tsne = tsne(mydat, ndim=2)
## extract coordinates and class information
cx = iris.cmds$embed # embedded coordinates of CMDS
tx = iris.tsne$embed #                         t-SNE
## visualize
#  main title
mc = paste("CMDS with STRESS=",round(iris.cmds$stress,4),sep="")
mt = paste("tSNE with STRESS=",round(iris.tsne$stress,4),sep="")
#  draw a figure
opar <- par(no.readonly=TRUE)
par(mfrow=c(2,1))
plot(cx, col=mylab, pch=19, main=mc)
plot(tx, col=mylab, pch=19, main=mt)
par(opar)
library(maotai)
help(tsne)
library(maotai)
library(maotai)
library(faraway)
#3
pchisq(32.175,2,lower.tail = FALSE)
#4
data<- c(226,109,110)
props<- c(.635,.193,.172)
marj<- chisq.test(data, p = props)
marj$expected
marj$statistic
marj$p.value
#5
?wbca
benign.regress <- glm(
wbca$Class ~ wbca$BNucl + wbca$Thick + wbca$Chrom + wbca$UShap + wbca$USize,
family = "binomial")
predict.values <- data.frame(cbind(median(wbca$BNucl) , median(wbca$Thick) , median(wbca$Chrom) , median(wbca$UShap) , median(wbca$USize)))
predict.values
summary(predict.values)
predict.glm(benign.regress, type = "response", newdata = predict.values)
predict.values <- data.frame(cbind(median(wbca$BNucl) , median(wbca$Thick) , median(wbca$Chrom) , median(wbca$UShap) , median(wbca$USize)))
predict.values
benign.regress
predict.values <- data.frame(cbind(median(wbca$BNucl) , median(wbca$Thick) , median(wbca$Chrom) , median(wbca$UShap) , median(wbca$USize)))
predict.glm(benign.regress, type = "response", newdata = predict.values)
predict.values
predict.glm(benign.regress, type = "response", newdata = predict.values)
benign.regress <- glm(
Class ~ BNucl + Thick + Chrom + UShap + USize,
family = "binomial", data=wbca)
predict(benign.regress, type="response", newdata = predict.values)
benign.regress <- glm(
Class ~ BNucl + Thick + Chrom + UShap + USize,
family = "binomial", data=wbca)
predict.values = data.frame(BNucl=cbind(median(wbca$BNucl),
Thick=median(wbca$Thick),
Chrom=median(wbca$Chrom),
UShap=median(wbca$UShap),
USize=median(wbca$USize)))
predict(benign.regress, type="response", newdata = predict.values)
help(predict)
help(predict.glm)
benign.regress <- glm(
wbca$Class ~ wbca$BNucl + wbca$Thick + wbca$Chrom + wbca$UShap + wbca$USize,
family = "binomial")
predict.values <- data.frame(cbind(median(wbca$BNucl) , median(wbca$Thick) , median(wbca$Chrom) , median(wbca$UShap) , median(wbca$USize)))
predict.glm(benign.regress, type = "response", newdata = predict.values)
rm(list=ls())
library(faraway)
attach(wbca)
library(faraway)
attach(wbca)
benign.regress <- glm(Class~BNucl+Thick+Chrom+UShap+USize, family="binomial")
predict.values <- data.frame(
BNucl=median(BNucl),
Thick=median(Thick),
Chrom=median(Chrom),
UShap=median(UShap),
USize=median(USize)
)
predict.glm(benign.regress, type="response", newdata=predict.values)
detach(wbca)
rm(list=ls())
library(faraway)
data(wbca)
benign.regress <- glm(Class~BNucl+Thick+Chrom+UShap+USize, family="binomial", data=wbca)
benign.regress <- glm(Class~BNucl+Thick+Chrom+UShap+USize, family="binomial", data=wbca)
predict.values <- data.frame(
BNucl = median(wbca$BNucl),
Thick = median(wbca$Thick),
Chrom = median(wbca$Chrom),
UShap = median(wbca$UShap),
USize = median(wbca$USize))
predict.glm(benign.regress, type="response", newdata=predict.values)
predict.values <- data.frame(cbind(median(wbca$BNucl) , median(wbca$Thick) , median(wbca$Chrom) , median(wbca$UShap) , median(wbca$USize)))
predict.glm(benign.regress, type="response", newdata=predict.values)
library(maotai)
library(maotai)
rm(list=ls())
x = dist(matrix(rnorm(10*2),ncol=2))
x
class(x)
help(eigen)
library(maotai)
nem(mydat)
data(iris)
mydat = as.matrix(iris[,1:4])
## calculate NEM
nem(mydat)
data(iris)
mydat = as.matrix(iris[,1:4])
## calculate NEM
nem(mydat)
data(iris)
mydat = as.matrix(iris[,1:4])
## calculate NEM
nem(mydat)
data(iris)
mydat = as.matrix(iris[,1:4])
## calculate NEM
nem(mydat)
data(iris)
mydat = as.matrix(iris[,1:4])
## calculate NEM
nem(mydat)
library(maotai)
library(maotai)
## use simple example of iris dataset
data(iris)
mydat = as.matrix(iris[,1:4])
## calculate NEF
nef(mydat)
## use simple example of iris dataset
data(iris)
mydat = as.matrix(iris[,1:4])
## calculate NEF
nef(mydat)
library(maotai)
library(maotai)
rm(list=ls())
library(maotai)
rm(list=ls())
library(maotai)
emds = getFromNamespace("hidden_emds","maotai")
# example -----------------------------------------------------------------
library(labdsv)
data(bryceveg) # returns a vegetation data.frame
dis.bc <- as.matrix(dsvdis(bryceveg,'bray/curtis')) # calculate a Bray/Curtis
emds = getFromNamespace("hidden_emds","maotai")
out.cmds <- cmds(dis.bc, ndim=2)$embed
out.emds1 <- emds(dis.bc, ndim=2, method="closure")$embed
out.emds2 <- emds(dis.bc, ndim=2, method="gram")$embed
par(mfrow=c(1,3),pty="s")
plot(out.cmds, main="cmds")
plot(out.emds1, main="emds::closure")
plot(out.emds2, main="emds::gram")
par(mfrow=c(3,1))
plot(out.cmds, main="cmds")
plot(out.emds1, main="emds::closure")
plot(out.emds2, main="emds::gram")
rm(list=ls())
graphics.off()
rm(list=ls())
library(maotai)
library(maotai)
library(Rlinsolve)
install.packages("Rlinsolve")
library(Rlinsolve)
aa = diag(5)
bb = aa%*%1:5
bb
lsolve.gmres(aa,bb)
solve(aa,bb)
lsolve.gmres(aa,bb)
help("lsolve.gmres")
## Overdetermined System
A = matrix(rnorm(10*5),nrow=10)
x = rnorm(5)
b = A%*%x
out1 = lsolve.cg(A,b)
out3_1 = lsolve.gmres(A,b,restart=2)
out3_2 = lsolve.gmres(A,b,restart=3)
out3_3 = lsolve.gmres(A,b,restart=4)
matout = cbind(matrix(x),out1$x, out3_1$x, out3_2$x, out3_3$x);
colnames(matout) = c("true x","CG", "GMRES(2)", "GMRES(3)", "GMRES(4)")
print(matout)
lsolve.gmres(aa,bb)
lsolve.gmres(aa,bb)
lsolve.gmres(aa,bb)
lsolve.gmres(aa,bb)
lsolve.gmres(aa,bb, reltol=1e-10)
lsolve.gmres(aa,bb, reltol=1e-10)
lsolve.gmres(aa,bb, reltol=1e-10)
lsolve.gmres(aa,bb, reltol=1e-10)
lsolve.gmres(aa,bb, reltol=1e-20)
lsolve.gmres(aa,bb, reltol=1e-20)
library(maotai)
library(maotai)
library(InspectChangepoint)
help(inspect)
library(maotai)
library(maotai)
#' @export
hidden_gmm <- function(data, k=2, maxiter=100){
# preprocessing
if (is.vector){
data = matrix(data, ncol=1)
}
# parameters
myn = nrow(data)
myp = ncol(data)
myk = round(k)
# fit
tmpout  = cpp_gmm_full(t(data), myk, round(maxiter))
tmpout  = arma_gmm_full(t(data), myk, round(maxiter))
tmpmean  = t(tmpout$means)
tmpcovs  = tmpout$covs
myweight = as.vector(tmpout$weight)
myweight = myweight/sum(myweight)
# score part : for all three, minimum is good.
loglkd = tmpout$loglkd
par.k  = (myp*myk) + ((myp*(myp+1)/2)*myk) + (myk-1) # mean + covs + proportion
gmmscore = c(AIC=-2*loglkd + (2*par.k), BIC=-2*loglkd + (par.k*log(myn)),
HQIC=-2*loglkd + 2*par.k*log(log(myn)))
# returnt the output
output = list()
output$mean      = tmpmean
output$variance  = tmpcovs
output$weight    = myweight
output$scores    = gmmscore
output$cluster   = hidden_auxlabel_gmm(data, tmpmean, tmpcovs, myweight)$cluster
output$algorithm = "gmm"
return(structure(output, class="T4cluster"))
}
rm(list=ls())
library(maotai)
hjey = hidden_gmm(rnorm(100), k=1)
library(maotai)
hjey = hidden_gmm(rnorm(100), k=1)
library(maotai)
hjey = hidden_gmm(rnorm(100), k=1)
library(maotai)
library(maotai)
library(maotai)
x1 = matrix(rnorm(10*3, mean=-3), ncol=3)
x2 = matrix(rnorm(10*3),          ncol=3)
x3 = matrix(rnorm(10*3,mean=3), ncol=3)
xx = rbind(x1,x2,x3)
dx = stats::dist(xx)
library(maotai)
hey = hidden_kmedoids_best(dx, mink=1, maxk=10)
hey = hidden_kmedoids_best(dx, mink=2, maxk=10)
library(maotai)
hey = hidden_kmedoids_best(dx, mink=2, maxk=10)
hey
plot(hey$score, "b")
plot(hey$score, type="b")
library(maotai)
hey = hidden_kmedoids_best(dx, mink=1, maxk=10)
library(maotai)
hey = hidden_kmedoids_best(dx, mink=1, maxk=10)
plot(hey$score, type="b")
hey
hey$label[,hey$opt.k]
utils::packageVersion("maotai")
rm(list=ls())
library(maotai)
help(geigen)
library(geigen)
help("geigen")
library(maotai)
aux.subsetid <- function(n, k){
x = sample(1:n)
return(split(x, sort(x%%k)))
}
aux.subsetid(10,3)
aux.subsetid(10,3)
aux.subsetid(10,3)
aux.subsetid(10,3)
aux.subsetid(10,3)
aux.subsetid(10,3)
aux.subsetid(10,3)
aux.subsetid(10,7)
aux.subsetid(10,5)
aux.subsetid(10,5)
hey = aux.subsetid(10,5)
lapply(hey, names)
library(maotai)
library(geigen)
help(geigen)
A <- matrix(c(14, 10, 12,
10, 12, 13,
12, 13, 14), nrow=3, byrow=TRUE)
B <- matrix(c(48, 17, 26,
17, 33, 32,
26, 32, 34), nrow=3, byrow=TRUE)
hidden_geigen(A,B)
library(maotai)
geigen(A,B)
hidden_geigen(A,B)
library(maotai)
geigen(A,B)
hidden_geigen(A,B)
library(maotai)
A <- matrix(c(14, 10, 12,
10, 12, 13,
12, 13, 14), nrow=3, byrow=TRUE)
B <- matrix(c(48, 17, 26,
17, 33, 32,
26, 32, 34), nrow=3, byrow=TRUE)
hidden_geigen(A,B)
geigen(A,B)
out1 = hidden_geigen(A,B)
out2 = geigen(A,B)
A%*%out1$vectors[,1]
B%*%out1$vectors[,1]*out1$values[1]
out1 = hidden_geigen(A,B)
out2 = geigen(A,B)
out1
out2
library(maotai)
A <- matrix(c(14, 10, 12,
10, 12, 13,
12, 13, 14), nrow=3, byrow=TRUE)
B <- matrix(c(48, 17, 26,
17, 33, 32,
26, 32, 34), nrow=3, byrow=TRUE)
out1 = hidden_geigen(A,B)
out2 = geigen(A,B)
out1
out2
library(maotai)
A <- matrix(c(14, 10, 12,
10, 12, 13,
12, 13, 14), nrow=3, byrow=TRUE)
B <- matrix(c(48, 17, 26,
17, 33, 32,
26, 32, 34), nrow=3, byrow=TRUE)
out1 = hidden_geigen(A,B,normalize = FALSE)
out2 = geigen(A,B)
out1
out2
rm(list=ls())
library(maotai)
library(maotai)
library(maotai)
usethis::use_mit_license(name="Kisung You")
library(maotai)
library(fda)
