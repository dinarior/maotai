if (i<2){
plot(elist[[idk[i]]], verticals=TRUE, lwd=0.5)
} else {
plot(elist[[idk[i]]], add=TRUE, verticals=TRUE, lwd=0.5)
}
}
plot(output$centers[[k]], add=TRUE, verticals=TRUE, lwd=2, col="red")
}
myk = 2                         ## additional checkups
output = epmeans(elist, k=myk)
graphics.off()
par(mfrow=c(1,myk))
for (k in 1:myk){
idk = which(output$cluster==k)
for (i in 1:length(idk)){
if (i<2){
plot(elist[[idk[i]]], verticals=TRUE, lwd=0.5)
} else {
plot(elist[[idk[i]]], add=TRUE, verticals=TRUE, lwd=0.5)
}
}
plot(output$centers[[k]], add=TRUE, verticals=TRUE, lwd=2, col="red")
}
myk = 2                         ## additional checkups
output = epmeans(elist, k=myk)
graphics.off()
par(mfrow=c(1,myk))
for (k in 1:myk){
idk = which(output$cluster==k)
for (i in 1:length(idk)){
if (i<2){
plot(elist[[idk[i]]], verticals=TRUE, lwd=0.1)
} else {
plot(elist[[idk[i]]], add=TRUE, verticals=TRUE, lwd=0.1)
}
}
plot(output$centers[[k]], add=TRUE, verticals=TRUE, lwd=2, col="red")
}
help("rgamma")
elist = list()
for (i in 1:10){
elist[[i]] = ecdf(rgamma(100, 1))
}
for (j in 11:20){
elist[[j]] = ecdf(rnorm(100, mean=3.69, sd=1.2))
}
myk = 2                         ## additional checkups
output = epmeans(elist, k=myk)
graphics.off()
par(mfrow=c(1,myk))
for (k in 1:myk){
idk = which(output$cluster==k)
for (i in 1:length(idk)){
if (i<2){
plot(elist[[idk[i]]], verticals=TRUE, lwd=0.1)
} else {
plot(elist[[idk[i]]], add=TRUE, verticals=TRUE, lwd=0.1)
}
}
plot(output$centers[[k]], add=TRUE, verticals=TRUE, lwd=2, col="red")
}
elist = list()
for (i in 1:10){
elist[[i]] = ecdf(rgamma(100, 1) + rnorm(100, sd=sqrt(0.5)))
}
for (j in 11:20){
elist[[j]] = ecdf(rnorm(100, mean=3.69, sd=1.2) + rnorm(100, sd=sqrt(0.5)))
}
myk = 2                         ## additional checkups
output = epmeans(elist, k=myk)
graphics.off()
par(mfrow=c(1,myk))
for (k in 1:myk){
idk = which(output$cluster==k)
for (i in 1:length(idk)){
if (i<2){
plot(elist[[idk[i]]], verticals=TRUE, lwd=0.1)
} else {
plot(elist[[idk[i]]], add=TRUE, verticals=TRUE, lwd=0.1)
}
}
plot(output$centers[[k]], add=TRUE, verticals=TRUE, lwd=2, col="red")
}
myk = 3                         ## additional checkups
output = epmeans(elist, k=myk)
graphics.off()
par(mfrow=c(1,myk))
for (k in 1:myk){
idk = which(output$cluster==k)
for (i in 1:length(idk)){
if (i<2){
plot(elist[[idk[i]]], verticals=TRUE, lwd=0.1, do.points=FALSE)
} else {
plot(elist[[idk[i]]], add=TRUE, verticals=TRUE, lwd=0.1, do.points=FALSE)
}
}
plot(output$centers[[k]], add=TRUE, verticals=TRUE, lwd=2, col="red", do.points=FALSE)
}
myk = 4                     ## additional checkups
output = epmeans(elist, k=myk)
graphics.off()
par(mfrow=c(1,myk))
for (k in 1:myk){
idk = which(output$cluster==k)
for (i in 1:length(idk)){
if (i<2){
plot(elist[[idk[i]]], verticals=TRUE, lwd=0.1, do.points=FALSE)
} else {
plot(elist[[idk[i]]], add=TRUE, verticals=TRUE, lwd=0.1, do.points=FALSE)
}
}
plot(output$centers[[k]], add=TRUE, verticals=TRUE, lwd=2, col="red", do.points=FALSE)
}
myk = 2                    ## additional checkups
output = epmeans(elist, k=myk)
graphics.off()
par(mfrow=c(1,myk))
for (k in 1:myk){
idk = which(output$cluster==k)
for (i in 1:length(idk)){
if (i<2){
plot(elist[[idk[i]]], verticals=TRUE, lwd=0.1, do.points=FALSE)
} else {
plot(elist[[idk[i]]], add=TRUE, verticals=TRUE, lwd=0.1, do.points=FALSE)
}
}
plot(output$centers[[k]], add=TRUE, verticals=TRUE, lwd=2, col="red", do.points=FALSE)
}
myk = 2                    ## additional checkups
output = epmeans(elist, k=myk)
graphics.off()
par(mfrow=c(1,myk))
for (k in 1:myk){
idk = which(output$cluster==k)
for (i in 1:length(idk)){
if (i<2){
plot(elist[[idk[i]]], verticals=TRUE, lwd=0.25, do.points=FALSE)
} else {
plot(elist[[idk[i]]], add=TRUE, verticals=TRUE, lwd=0.25, do.points=FALSE)
}
}
plot(output$centers[[k]], add=TRUE, verticals=TRUE, lwd=2, col="red", do.points=FALSE)
}
library(maotai)
library(maotai)
library(maotai)
myk = 2                    ## additional checkups
output = epmeans(elist, k=myk)
graphics.off()
par(mfrow=c(1,myk))
for (k in 1:myk){
idk = which(output$cluster==k)
for (i in 1:length(idk)){
if (i<2){
plot(elist[[idk[i]]], verticals=TRUE, lwd=0.25, do.points=FALSE)
} else {
plot(elist[[idk[i]]], add=TRUE, verticals=TRUE, lwd=0.25, do.points=FALSE)
}
}
plot(output$centers[[k]], add=TRUE, verticals=TRUE, lwd=2, col="red", do.points=FALSE)
}
myk = 2                    ## additional checkups
output = epmeans(elist, k=myk)
graphics.off()
par(mfrow=c(1,myk))
for (k in 1:myk){
idk = which(output$cluster==k)
for (i in 1:length(idk)){
if (i<2){
plot(elist[[idk[i]]], verticals=TRUE, lwd=0.25, do.points=FALSE)
} else {
plot(elist[[idk[i]]], add=TRUE, verticals=TRUE, lwd=0.25, do.points=FALSE)
}
}
plot(output$centers[[k]], add=TRUE, verticals=TRUE, lwd=2, col="red", do.points=FALSE)
}
myk = 2                    ## additional checkups
output = epmeans(elist, k=myk)
graphics.off()
par(mfrow=c(1,myk))
for (k in 1:myk){
idk = which(output$cluster==k)
for (i in 1:length(idk)){
if (i<2){
plot(elist[[idk[i]]], verticals=TRUE, lwd=0.25, do.points=FALSE)
} else {
plot(elist[[idk[i]]], add=TRUE, verticals=TRUE, lwd=0.25, do.points=FALSE)
}
}
plot(output$centers[[k]], add=TRUE, verticals=TRUE, lwd=2, col="red", do.points=FALSE)
}
myk = 2                    ## additional checkups
output = epmeans(elist, k=myk)
graphics.off()
par(mfrow=c(1,myk))
for (k in 1:myk){
idk = which(output$cluster==k)
for (i in 1:length(idk)){
if (i<2){
plot(elist[[idk[i]]], verticals=TRUE, lwd=0.25, do.points=FALSE)
} else {
plot(elist[[idk[i]]], add=TRUE, verticals=TRUE, lwd=0.25, do.points=FALSE)
}
}
plot(output$centers[[k]], add=TRUE, verticals=TRUE, lwd=2, col="red", do.points=FALSE)
}
myk = 2                    ## additional checkups
output = epmeans(elist, k=myk)
graphics.off()
par(mfrow=c(1,myk))
for (k in 1:myk){
idk = which(output$cluster==k)
for (i in 1:length(idk)){
if (i<2){
plot(elist[[idk[i]]], verticals=TRUE, lwd=0.25, do.points=FALSE)
} else {
plot(elist[[idk[i]]], add=TRUE, verticals=TRUE, lwd=0.25, do.points=FALSE)
}
}
plot(output$centers[[k]], add=TRUE, verticals=TRUE, lwd=2, col="red", do.points=FALSE)
}
myk = 2                    ## additional checkups
output = epmeans(elist, k=myk)
graphics.off()
par(mfrow=c(1,myk))
for (k in 1:myk){
idk = which(output$cluster==k)
for (i in 1:length(idk)){
if (i<2){
plot(elist[[idk[i]]], verticals=TRUE, lwd=0.25, do.points=FALSE)
} else {
plot(elist[[idk[i]]], add=TRUE, verticals=TRUE, lwd=0.25, do.points=FALSE)
}
}
plot(output$centers[[k]], add=TRUE, verticals=TRUE, lwd=2, col="red", do.points=FALSE)
}
library(maotai)
## two sets of 1d samples, 10 each and add some noise
#    set 1 : mixture of two gaussians
#    set 2 : gamma distribution
elist = list()
for (i in 1:10){
elist[[i]] = stats::ecdf(rnorm(50, mean=-4), rnorm(50, mean=4))
}
for (j in 11:20){
elist[[j]] = stats::ecdf(rgamma(100,1) + rnorm(100, sd=sqrt(0.5)))
}
## run EP-means with 2 clusters
epout2 = epmeans(elist, k=2)
## visualize
opar = par(mfrow=c(1,2))
for (k in 1:2){
idk = which(output$cluster==k)
for (i in 1:length(idk)){
if (i<2){
plot(elist[[idk[i]]], verticals=TRUE, lwd=0.25, do.points=FALSE, main="class 1")
} else {
plot(elist[[idk[i]]], add=TRUE, verticals=TRUE, lwd=0.25, do.points=FALSE)
}
plot(output$centers[[k]], add=TRUE, verticals=TRUE, lwd=2, col="red", do.points=FALSE)
}
## two sets of 1d samples, 10 each and add some noise
#    set 1 : mixture of two gaussians
#    set 2 : gamma distribution
elist = list()
for (i in 1:10){
elist[[i]] = stats::ecdf(rnorm(50, mean=-4), rnorm(50, mean=4))
}
for (j in 11:20){
elist[[j]] = stats::ecdf(rgamma(100,1) + rnorm(100, sd=sqrt(0.5)))
}
## run EP-means with 2 clusters
epout2 = epmeans(elist, k=2)
## visualize
opar = par(mfrow=c(1,2))
for (k in 1:2){
idk = which(output$cluster==k)
for (i in 1:length(idk)){
if (i<2){
plot(elist[[idk[i]]], verticals=TRUE, lwd=0.25, do.points=FALSE, main="class 1")
} else {
plot(elist[[idk[i]]], add=TRUE, verticals=TRUE, lwd=0.25, do.points=FALSE)
}
plot(output$centers[[k]], add=TRUE, verticals=TRUE, lwd=2, col="red", do.points=FALSE)
}
graphics.off()
elist = list()
for (i in 1:10){
elist[[i]] = stats::ecdf(rnorm(50, mean=-4), rnorm(50, mean=4))
}
for (j in 11:20){
elist[[j]] = stats::ecdf(rgamma(100,1) + rnorm(100, sd=sqrt(0.5)))
}
# run EP-means with 2 clusters
epout2 = epmeans(elist, k=2)
# visualize
opar = par(mfrow=c(1,2))
for (k in 1:2){
idk = which(output$cluster==k)
for (i in 1:length(idk)){
if (i<2){
plot(elist[[idk[i]]], verticals=TRUE, lwd=0.25, do.points=FALSE, main="class 1")
} else {
plot(elist[[idk[i]]], add=TRUE, verticals=TRUE, lwd=0.25, do.points=FALSE)
}
plot(output$centers[[k]], add=TRUE, verticals=TRUE, lwd=2, col="red", do.points=FALSE)
}
par(opar)
# generate data
elist = list()
for (i in 1:10){
elist[[i]] = stats::ecdf(c(rnorm(50, mean=-4), rnorm(50, mean=4)))
}
for (j in 11:20){
elist[[j]] = stats::ecdf(rgamma(100,1) + rnorm(100, sd=sqrt(0.5)))
}
# run EP-means with 2 clusters
epout2 = epmeans(elist, k=2)
# visualize
opar = par(mfrow=c(1,2))
for (k in 1:2){
idk = which(output$cluster==k)
for (i in 1:length(idk)){
if (i<2){
plot(elist[[idk[i]]], verticals=TRUE, lwd=0.25, do.points=FALSE, main="class 1")
} else {
plot(elist[[idk[i]]], add=TRUE, verticals=TRUE, lwd=0.25, do.points=FALSE)
}
plot(output$centers[[k]], add=TRUE, verticals=TRUE, lwd=2, col="red", do.points=FALSE)
}
par(opar)
}
elist = list()
for (i in 1:10){
elist[[i]] = stats::ecdf(c(rnorm(50, mean=-4), rnorm(50, mean=4)))
}
for (j in 11:20){
elist[[j]] = stats::ecdf(rgamma(100,1) + rnorm(100, sd=sqrt(0.5)))
}
# run EP-means with 2 clusters
epout2 = epmeans(elist, k=2)
# visualize
epout2 = epmeans(elist, k=2)
# visualize
opar = par(mfrow=c(1,2))
for (k in 1:2){
idk = which(output$cluster==k)
for (i in 1:length(idk)){
if (i<2){
plot(elist[[idk[i]]], verticals=TRUE, lwd=0.25, do.points=FALSE, main="class 1")
} else {
plot(elist[[idk[i]]], add=TRUE, verticals=TRUE, lwd=0.25, do.points=FALSE)
}
plot(output$centers[[k]], add=TRUE, verticals=TRUE, lwd=2, col="red", do.points=FALSE)
}
}
par(opar)
# generate data
elist = list()
for (i in 1:10){
elist[[i]] = stats::ecdf(rnorm(100, mean=-1.2))
}
for (j in 11:20){
elist[[j]] = stats::ecdf(rgamma(100,1) + rnorm(100, sd=sqrt(0.5)))
}
# run EP-means with 2 clusters
epout2 = epmeans(elist, k=2)
# visualize
opar = par(mfrow=c(1,2))
for (k in 1:2){
idk = which(output$cluster==k)
for (i in 1:length(idk)){
if (i<2){
plot(elist[[idk[i]]], verticals=TRUE, lwd=0.25, do.points=FALSE, main="class 1")
} else {
plot(elist[[idk[i]]], add=TRUE, verticals=TRUE, lwd=0.25, do.points=FALSE)
}
plot(output$centers[[k]], add=TRUE, verticals=TRUE, lwd=2, col="red", do.points=FALSE)
}
}
par(opar)
# generate data
elist = list()
for (i in 1:10){
elist[[i]] = stats::ecdf(c(rnorm(100, mean=-2), rnorm(50, mean=2)))
}
for (j in 11:20){
elist[[j]] = stats::ecdf(rgamma(100,1) + rnorm(100, sd=sqrt(0.5)))
}
# run EP-means with 2 clusters
epout2 = epmeans(elist, k=2)
# visualize
opar = par(mfrow=c(1,2))
for (k in 1:2){
idk = which(epout2$cluster==k)
for (i in 1:length(idk)){
if (i<2){
plot(elist[[idk[i]]], verticals=TRUE, lwd=0.25, do.points=FALSE, main="class 1")
} else {
plot(elist[[idk[i]]], add=TRUE, verticals=TRUE, lwd=0.25, do.points=FALSE)
}
plot(epout2$centers[[k]], add=TRUE, verticals=TRUE, lwd=2, col="red", do.points=FALSE)
}
}
par(opar)
## two sets of 1d samples, 10 each and add some noise
#    set 1 : mixture of two gaussians
#    set 2 : gamma
# generate data
elist = list()
for (i in 1:10){
elist[[i]] = stats::ecdf(c(rnorm(100, mean=-2), rnorm(50, mean=2)))
}
for (j in 11:20){
elist[[j]] = stats::ecdf(rgamma(100,1) + rnorm(100, sd=sqrt(0.5)))
}
# run EP-means with 2 clusters
epout2 = epmeans(elist, k=2)
# visualize
opar = par(mfrow=c(1,2))
for (k in 1:2){
idk = which(epout2$cluster==k)
for (i in 1:length(idk)){
if (i<2){
plot(elist[[idk[i]]], verticals=TRUE, lwd=0.25, do.points=FALSE, main=paste("class",k))
} else {
plot(elist[[idk[i]]], add=TRUE, verticals=TRUE, lwd=0.25, do.points=FALSE)
}
plot(epout2$centers[[k]], add=TRUE, verticals=TRUE, lwd=2, col="red", do.points=FALSE)
}
}
par(opar)
# run EP-means with k clusters
# change the value below to see different settings
myk    = 2
epout2 = epmeans(elist, k=myk)
# visualize
opar = par(mfrow=c(1,myk))
for (k in 1:myk){
idk = which(epout2$cluster==k)
for (i in 1:length(idk)){
if (i<2){
plot(elist[[idk[i]]], verticals=TRUE, lwd=0.25, do.points=FALSE, main=paste("class",k))
} else {
plot(elist[[idk[i]]], add=TRUE, verticals=TRUE, lwd=0.25, do.points=FALSE)
}
plot(epout2$centers[[k]], add=TRUE, verticals=TRUE, lwd=2, col="red", do.points=FALSE)
}
}
par(opar)
myk    = 3
epout2 = epmeans(elist, k=myk)
# visualize
opar = par(mfrow=c(1,myk))
for (k in 1:myk){
idk = which(epout2$cluster==k)
for (i in 1:length(idk)){
if (i<2){
plot(elist[[idk[i]]], verticals=TRUE, lwd=0.25, do.points=FALSE, main=paste("class",k))
} else {
plot(elist[[idk[i]]], add=TRUE, verticals=TRUE, lwd=0.25, do.points=FALSE)
}
plot(epout2$centers[[k]], add=TRUE, verticals=TRUE, lwd=2, col="red", do.points=FALSE)
}
}
par(opar)
myk    = 4
epout2 = epmeans(elist, k=myk)
# visualize
opar = par(mfrow=c(1,myk))
for (k in 1:myk){
idk = which(epout2$cluster==k)
for (i in 1:length(idk)){
if (i<2){
plot(elist[[idk[i]]], verticals=TRUE, lwd=0.25, do.points=FALSE, main=paste("class",k))
} else {
plot(elist[[idk[i]]], add=TRUE, verticals=TRUE, lwd=0.25, do.points=FALSE)
}
plot(epout2$centers[[k]], add=TRUE, verticals=TRUE, lwd=2, col="red", do.points=FALSE)
}
}
par(opar)
library(maotai)
help("epmeans")
library(maotai)
class(diag(5))
library(maotai)
install.packages("tidyverse")
library(maotai)
## toy example
#  first list : 10 of random and uniform distributions
mylist1 = list()
for (i in 1:10){ mylist1[[i]] = stats::ecdf(stats::rnorm(50, sd=2))}
for (i in 11:20){mylist1[[i]] = stats::ecdf(stats::runif(50, min=-5))}
#  second list : 15 uniform and random distributions
mylist2 = list()
for (i in 1:15){ mylist2[[i]] = stats::ecdf(stats::runif(50, min=-5))}
for (i in 16:30){mylist2[[i]] = stats::ecdf(stats::rnorm(50, sd=2))}
## compute Kolmogorov-Smirnov distance
dm2ks = ecdfdist2(mylist1, mylist2, method="KS")
dm2lp = ecdfdist2(mylist1, mylist2, method="lp")
dm2wa = ecdfdist2(mylist1, mylist2, method="wasserstein")
nrs   = nrow(dm2ks)
## visualize
opar = par(mfrow=c(1,3))
image(dm2ks[,nrs:1], axes=FALSE, main="Kolmogorov-Smirnov")
image(dm2lp[,nrs:1], axes=FALSE, main="L2")
image(dm2wa[,nrs:1], axes=FALSE, main="Wasserstein")
par(opar)
help(kmeans)
library(maotai)
library(maotai)
