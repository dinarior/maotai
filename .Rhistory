library(maotai)
library(maotai)
library(maotai)
library(maotai)
# simple test
p = 100
mydim = 10
A = matrix(rnorm(p^2),nrow=p); A=A%*%t(A)
B = matrix(runif(p^2),nrow=p); B=B%*%t(B)
C = diag(p)
library(geigen)
eigAB = eigen(solve(B,A)) ## geigen(B,A) # we need largest so be careful of the order
mylist = list()
V = eigAB$vectors[,1:mydim]; mylist$V = V
myval = sum(diag(t(V)%*%A%*%V))/sum(diag(t(V)%*%B%*%V)); mylist$tr.val = myval
m12 = trio(A,B,dim=mydim, method="2012Ngo")
m9 = trio(A,B,dim=mydim, method="2009Jia")
m7 = trio(A,B,dim=mydim, method="2007Wang")
m3 = trio(A,B,dim=mydim, method="2003Guo")
# try rstiefel's optimization
library(rstiefel)
F2  = function(V){sum(diag(t(V)%*%B%*%V))/sum(diag(t(V)%*%A%*%V))} # top/bottom switch; can we speed up
dF2 = function(V){
aa = sum(diag(t(V)%*%A%*%V))
bb = sum(diag(t(V)%*%B%*%V))
t1 = 2*aa*(B%*%V) - 2*bb*(A%*%V)
t2 = aa^2
return(t1/t2)
}
st.V2 = optStiefel(F2,dF2, Vinit=rustiefel(p,mydim), method="curvilinear",
searchParams=list(rho1=0.1, rho2=0.9, tau=1),tol=1009*.Machine$double.eps)
st.val2 = sum(diag(t(st.V2)%*%A%*%st.V2))/sum(diag(t(st.V2)%*%B%*%st.V2))
library(maotai)
devtools::document()
library(maotai)
# simple test
p = 100
mydim = 10
A = matrix(rnorm(p^2),nrow=p); A=A%*%t(A)
B = matrix(runif(p^2),nrow=p); B=B%*%t(B)
C = diag(p)
library(geigen)
eigAB = eigen(solve(B,A)) ## geigen(B,A) # we need largest so be careful of the order
mylist = list()
V = eigAB$vectors[,1:mydim]; mylist$V = V
myval = sum(diag(t(V)%*%A%*%V))/sum(diag(t(V)%*%B%*%V)); mylist$tr.val = myval
m12 = trio(A,B,dim=mydim, method="2012Ngo")
m9 = trio(A,B,dim=mydim, method="2009Jia")
m7 = trio(A,B,dim=mydim, method="2007Wang")
m3 = trio(A,B,dim=mydim, method="2003Guo")
# try rstiefel's optimization
library(rstiefel)
F2  = function(V){sum(diag(t(V)%*%B%*%V))/sum(diag(t(V)%*%A%*%V))} # top/bottom switch; can we speed up
dF2 = function(V){
aa = sum(diag(t(V)%*%A%*%V))
bb = sum(diag(t(V)%*%B%*%V))
t1 = 2*aa*(B%*%V) - 2*bb*(A%*%V)
t2 = aa^2
return(t1/t2)
}
st.V2 = optStiefel(F2,dF2, Vinit=rustiefel(p,mydim), method="curvilinear",
searchParams=list(rho1=0.1, rho2=0.9, tau=1),tol=1009*.Machine$double.eps)
st.val2 = sum(diag(t(st.V2)%*%A%*%st.V2))/sum(diag(t(st.V2)%*%B%*%st.V2))
st.val2
m3$tr.val
myval
library(maotai)
RSpectra::eigs()
help(eigs)
help(det)
A = matrix(rnorm(25),nrow=5)
A = A%*%t(A)
det(A)
determinant(A, logarithm=TRUE)
determinant(A, logarithm=FALSE)
k=NULL
length(k)
is.null(k)
help(rankMatrix)
A
as.integer(rankMatrix(x))
library(Matrix)
as.integer(rankMatrix(x))
as.integer(rankMatrix(A))
RSpectra::eigs(A, 1)
help(eigs)
RSpectra::eigs(A, 1, "SA")
RSpectra::eigs(A, 1, "SR")
RSpectra::eigs(A, 1, "SR")$values
eigen(A)$values
B = matrix(rnorm(25),nrow=5)
B
eigen(B)$values
det(B)
abs(eigen(B)$values)
library(maotai)
library(maotai)
library(maotai)
pdet(A)
pdet(A, k=4)
pdet(A, k=3)
library(maotai)
pdet(A, k=4)
library(maotai)
pdet(A, k=4)
A = cov(matrix(rnorm(3*5),ncol=5))
pdet(A)
rankMatrix(A)
pdet(A, k=2)
x = sqrt(-01)
x = sqrt(-1)
x
A
B
eigen(B)$values
real(eigen(B)$values)
as.real(eigen(B)$values)
help(real)
Re(eigen(B)$values)
library(maotai)
pdet(B)
det(B)
rankMatrix(B)
pdet(B, k=4)
library(maotai)
library(maotai)
